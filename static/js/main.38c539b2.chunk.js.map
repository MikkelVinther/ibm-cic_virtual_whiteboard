{"version":3,"sources":["components/Post/Post.module.css","components/NewPost/NewPost.module.css","containers/Board/Board.module.css","components/Login/Login.module.css","assets/cute-kitten.jpg","components/Post/Post.js","components/NewPost/NewPost.js","containers/Board/Board.js","components/Login/Login.js","containers/Auth/Auth.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","post","props","asgnClass","txtClass","nameClass","hasIMG","classes","IMGPost","IMGText","IMGName","Post","className","close","onClick","click","IMG","alt","src","image","msg","name","NewPost","handleClick","toggle","modal","modal_content","this","onSubmit","submit","onChange","change","type","value","Component","Board","state","posts","postID","usrID","usrName","imgURL","kitten","newPostPopup","newPost","lastPostID","currentUserID","currentUser","deletePost","postIndex","modPosts","splice","setState","newPostToggle","postInputHandler","event","target","URL","createObjectURL","files","console","log","postSubmitHandler","nPost","push","preventDefault","map","index","key","NewPostBtn","Login","Auth","users","password","email","role","userInput","username","activeUsrID","showLogin","forEach","user","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.38c539b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Post\":\"Post_Post__1_bi-\",\"IMGPost\":\"Post_IMGPost__1VPpM\",\"IMG\":\"Post_IMG__3xRhS\",\"IMGText\":\"Post_IMGText__2IjLG\",\"IMGName\":\"Post_IMGName__3-58H\",\"RegText\":\"Post_RegText__2cGaC\",\"RegName\":\"Post_RegName__2KXEW\",\"close\":\"Post_close__SoSkC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"NewPost_modal__3iJyP\",\"modal_content\":\"NewPost_modal_content__3Gv-Q\",\"close\":\"NewPost_close__B3qsp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2Sj7_\",\"NewPostBtn\":\"Board_NewPostBtn__2qFSB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Login_modal__3EQhA\",\"modal_content\":\"Login_modal_content__qB7bB\",\"close\":\"Login_close__1BGXj\"};","module.exports = __webpack_public_path__ + \"static/media/cute-kitten.658bc24a.jpg\";","import React from 'react';\r\n\r\nimport classes from './Post.module.css';\r\n\r\nconst post = ( props ) => {\r\n\r\n    let asgnClass = null;\r\n    let txtClass = null;\r\n    let nameClass = null;\r\n    if (props.hasIMG){\r\n        asgnClass = classes.IMGPost;\r\n        txtClass = classes.IMGText;\r\n        nameClass = classes.IMGName;\r\n    }\r\n    else {\r\n        asgnClass = classes.Post;\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={asgnClass} >\r\n            <span className={classes.close} onClick={props.click}> x </span>\r\n            {props.hasIMG ? <img className={classes.IMG} alt=\"Here is maybe a beautiful kitten?\" src={props.image} /> : null}\r\n            <p className={txtClass}>{props.msg}</p>\r\n            <p className={nameClass}>- {props.name}</p>  \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default post;","import React, { Component } from 'react';\r\n\r\nimport classes from './NewPost.module.css';\r\n\r\n\r\nclass NewPost extends Component {\r\n\r\n    handleClick = () => {\r\n        this.props.toggle();\r\n    };\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n     <div className={classes.modal}>\r\n       <div className={classes.modal_content}>\r\n       <span className={classes.close} onClick={this.handleClick}> X </span>\r\n       <form onSubmit={this.props.submit}>\r\n       <p> Let's make a new post! </p>\r\n       <label>Message:</label>\r\n       <input name=\"message\" onChange={this.props.change}></input>\r\n       <label>Name:</label>\r\n       <input name=\"name\" onChange={this.props.change} ></input>\r\n       <label>Image:</label>\r\n       <input type=\"file\" name=\"img\" onChange={this.props.change}></input>\r\n       <input type=\"submit\" value=\"Submit\" />\r\n       </form>\r\n      </div>\r\n     </div>\r\n    );\r\n   }\r\n  }\r\n\r\nexport default NewPost;","import React, { Component } from 'react';\r\nimport Post from '../../components/Post/Post';\r\nimport NewPost from '../../components/NewPost/NewPost';\r\nimport kitten from '../../assets/cute-kitten.jpg';\r\n\r\nimport classes from './Board.module.css';\r\n\r\nclass Board extends Component {\r\n    state = {\r\n        posts: [\r\n            {postID: 1, usrID: 2, usrName:\"Mikkel\", msg: \"Oh wow! So many messages!\", hasIMG: false, imgURL: null},\r\n            {postID: 2, usrID: 1, usrName:\"Egil\", msg: \"This is another message\", hasIMG: true, imgURL: kitten},\r\n            {postID: 3, usrID: 3, usrName:\"Henrik\", msg: \"Here is a message as well, you know!\", hasIMG: false, imgURL: null}\r\n\r\n        ],\r\n        newPostPopup: false,\r\n        newPost: {postID: 0, usrName: \"\", msg: \"\", hasIMG: false, imgURL: null},\r\n        lastPostID: 3,\r\n        currentUserID: this.props.currentUser\r\n    }\r\n\r\n    deletePost = (postIndex) => {\r\n        const modPosts = [...this.state.posts];\r\n        modPosts.splice(postIndex, 1);\r\n        this.setState({posts: modPosts});\r\n    }\r\n\r\n    newPostToggle = () => {\r\n        this.setState({\r\n            newPostPopup: !this.state.newPostPopup\r\n        });\r\n    }\r\n\r\n    postInputHandler = ( event ) => {\r\n        const newPost = {...this.state.newPost};\r\n            if (event.target.name === \"name\") {\r\n                newPost.usrName = event.target.value;\r\n            }\r\n            else if (event.target.name === \"message\") {\r\n                newPost.msg = event.target.value;\r\n            }\r\n            else if (event.target.name === \"img\") {\r\n                newPost.imgURL =  URL.createObjectURL(event.target.files[0]);\r\n                newPost.hasIMG = true;\r\n            }\r\n        console.log(newPost);\r\n        this.setState({newPost: newPost});\r\n    }\r\n\r\n    postSubmitHandler = ( event ) => {\r\n        let nPost = {...this.state.newPost};\r\n        const posts = [...this.state.posts];\r\n        nPost.postID = this.state.lastPostID;\r\n        nPost.postID++;\r\n        posts.push(nPost);\r\n        this.setState({posts: posts});\r\n        console.log(this.state.newPost);\r\n        console.log(this.state.posts);\r\n        this.setState({lastPostID: nPost.postID});\r\n        this.setState({newPost: {postID: 0, usrName: \"\", msg: \"\", hasIMG: false, imgURL: null}});\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.Board}>\r\n                {this.state.posts.map((post, index) => {\r\n                    return ( \r\n                        <Post \r\n                        click={() => this.deletePost(index)} \r\n                        name={post.usrName}\r\n                        msg={post.msg}\r\n                        hasIMG={post.hasIMG}\r\n                        image={post.imgURL}\r\n                        key={post.postID} />);\r\n                })}\r\n                <div className={classes.NewPostBtn} onClick={this.newPostToggle}>\r\n                    Add Post\r\n                </div>\r\n                    {this.state.newPostPopup ? <NewPost submit={this.postSubmitHandler} change={this.postInputHandler} toggle={this.newPostToggle} /> : null}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\r\n\r\nimport classes from './Login.module.css';\r\n\r\n\r\nclass Login extends Component {\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n     <div className={classes.modal}>\r\n       <div className={classes.modal_content}>\r\n       <form onSubmit={this.props.submit}>\r\n       <p> Welcome to the Whiteboard! Login below: </p>\r\n       <label>Username:</label>\r\n       <input type=\"text\" name=\"username\" onChange={this.props.change}></input>\r\n       <label>Password:</label>\r\n       <input type=\"password\" name=\"password\" onChange={this.props.change} ></input>\r\n       <input type=\"submit\" value=\"Submit\" />\r\n       </form>\r\n      </div>\r\n     </div>\r\n    );\r\n   }\r\n  }\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport Board from '../Board/Board';\r\nimport Login from '../../components/Login/Login';\r\n\r\nimport classes from './Auth.module.css';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        users: [\r\n            {usrID: 1, usrName:\"Guest\", password: \"Guest\", email: \"guest@guest.ok\", role: \"user\"},\r\n        ],\r\n        userInput: {username: \"\", password: \"\"},\r\n        activeUsrID: 0,\r\n        showLogin: true\r\n    }\r\n\r\n    postInputHandler = ( event ) => {\r\n        const userInput = {...this.state.userInput};\r\n            if (event.target.name === \"username\") {\r\n                userInput.username = event.target.value;\r\n            }\r\n            else if (event.target.name === \"password\") {\r\n                userInput.password = event.target.value;\r\n            }\r\n\r\n        this.setState({userInput: userInput});\r\n    }\r\n\r\n    postSubmitHandler = ( event ) => {\r\n        const users = [...this.state.users];\r\n        const userInput = {...this.state.userInput};\r\n        users.forEach((user, index) => {\r\n            if (userInput.username === user.usrName && userInput.password === user.password){\r\n                this.state.activeUsrID = user.usrID;\r\n                this.setState({showLogin: false});\r\n            }\r\n            else {\r\n                alert(\"Stop right there!\\nThats the wrong username or password, pal\");\r\n            }\r\n        });\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    currentUser = () => {\r\n        const users = [...this.state.users];\r\n        let currentUser = {};\r\n        users.forEach((user, index) => {\r\n            if (this.state.activeUsrID === user.usrID){\r\n                currentUser = user;\r\n            }\r\n        });\r\n        return currentUser;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                 {this.state.showLogin ? <Login submit={this.postSubmitHandler} change={this.postInputHandler} /> : null}\r\n                <Board currentUser={this.currentUser} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Auth;","import React from 'react';\nimport './App.css';\n\nimport Auth from './containers/Auth/Auth';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Auth />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}